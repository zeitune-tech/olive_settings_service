package sn.zeitune.oliveinsurancesettings.app.services.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import sn.zeitune.oliveinsurancesettings.app.clients.VehicleExploitationClient;
import sn.zeitune.oliveinsurancesettings.app.dtos.externals.exploitationAttributes.MetaSchemaResponseExternalDTO;
import sn.zeitune.oliveinsurancesettings.app.dtos.responses.exploitationAttributes.ExploitationObjectResponseDTO;
import sn.zeitune.oliveinsurancesettings.app.mappers.exploitationAttributes.ExploitationAttributeMapper;
import sn.zeitune.oliveinsurancesettings.app.mappers.exploitationAttributes.ExploitationObjectMapper;
import sn.zeitune.oliveinsurancesettings.app.services.ExploitationAttributeService;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Transactional
@RequiredArgsConstructor
public class ExploitationAttributeServiceImpl implements ExploitationAttributeService {

    private final VehicleExploitationClient vehicleExploitationClient;

    @Override
    public List<ExploitationObjectResponseDTO> getAllExploitationObjects() {
        Map<String, ExploitationObjectResponseDTO> map = new HashMap<>();
        for (MetaSchemaResponseExternalDTO attribute : vehicleExploitationClient.getAllAttribute()) {
            String type = attribute.entite();
            if (!map.containsKey(type))
                map.put(type, ExploitationObjectMapper.newExploitationObjectResponseDTO(attribute));
            else
                map.get(type).getAttributes().add(ExploitationAttributeMapper.map(attribute));
        }
        return new ArrayList<>(map.values());
    }
}
